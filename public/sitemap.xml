<search>
    
     <entry>
        <title>How I&#39;m able to take notes with LaTeX in math class</title>
        <url>https://damrah.netlify.app/post/how-im-able-to-take-notes-with-latex-in-mathematics-class/</url>
        <categories>
          
        </categories>
        <tags>
          <tag>note taking</tag>
        </tags>
        <content type="html"> For a very long time, I have been trying to create the perfect setup for note taking in general (but more specifically, for math). Before, I used to use notion to take my notes, which was okay, but I wanted something much more productive. And thus, my system was BORN!
Here is how some of my notes look like (I am still working on getting the pictures for this. Until then, you can wait üò¢):
If you want to see how my completed notes look like, visit here. I also store all of my notes here.
I created this method during the summer of my 10th year in school. I am preparing my self for when I go to university. So I set myself 4 goals and these goals must be met for me to use the system. They are:
 Writing mathematical equations as fast (or faster) than my professor was an A MUST. Drawing the figures must be as easy, fast, and simple. It must feel like I am writing them on paper. My notes are very easily manageable and easy to access.  I will eventually have a ton of posts talking about this specific subject, but for now, I will go over step 1 (Writing mathematical equations as fast (or faster) than my professor was an A MUST.)
NeoVim and LaTeX Quickly, what is NeoVim.
NeoVim is a fork of Vim. For writing my notes, I use NeoVim (You can find my custom NeoVim config here). Later on, I will create a blog post talking about how I setup my NeoVim setup.
I literally use NeoVim for everything. I use it to write LaTeX, markdown, actual code. A lot of people complain saying &amp;ldquo;Vim is to hard to learn and it&amp;rsquo;s weird&amp;rdquo;, but trust me, once you learn it, you can NEVER UN-LEARN IT, it saves you HOURS OF TYPING, and feels AMAZING WHEN YOU&amp;rsquo;RE IN IT. But, yes, it does have a steep learning curve, but after you learn it, you will be rewarded.
Now, with that out of the way, here is what my screen looks like when I am working with LaTeX:
On the left side, I have my editor (NeoVim) and on the right side, I have my pdf viewer Zathura.
Here is a quick list of all of my utilities:
 OS: Arch WM: DWM EDITOR: NeoVim PDF VIEWER: Zathura  I have a huge list of plugins that you can view here, but the plugin that I use for LaTeX is vimtex. It provides:
 Syntax highlighting Auto compiling Renaming entire environments Shows you the toc (Table of Contents)  But, before I talk about how I configure NeoVim for LaTeX, let me explain to you how I setup my NeoVim. This won&amp;rsquo;t be an in depth tutorial (that will be in a different post.)
For installing NeoVim Plugins, I use Packer, which is a plugin-manager written in lua. It only works in NeoVim because vim doesn&amp;rsquo;t support lua (because VIM SUCKS only NEOVIM RULES.) So, if you are unsure, go here (I will update this when I post a blog post about my NeoVim setup, until then, WAIT üò≠.)
Now, back to LaTeX, I use a gazillion plugins, but the most powerful one for LaTeX users is VIMTEX. Here is how I installed it:
use { &amp;#39;lervag/vimtex&amp;#39; } &amp;#34; If you use packer Add that to your plugins.lua, or wherever you place your plugins.
Now, time to configure it. Add this to your init.vim or .vimrc:
let g:vimtex_view_method=&amp;#39;zathura&amp;#39;let g:tex_flavor=&amp;#39;latex&amp;#39;set conceallevel=1The first line tells VIMTEX what pdf viewer you want to use to open your pdf. Simple. The next line tells what kind of LaTeX you want to use to compile your document. The last line tell NeoVim to configure the concealment. This is a feature that NeoVim uses to hide certain parts of the code if your cursor isn&amp;rsquo;t on it. It hides \[, \], $. By making \[, \], $ invisible, they aren&amp;rsquo;t so distracting.
UltiSnippets One of the major reasons why I&amp;rsquo;m so fast at typing when it comes to LaTeX, is because of snippets.
A snippet is a short reusable piece of text that can be triggered by some other text.
Then, you have snippet managers, which manages the snippets that you make. There are many snippet managers out there, but I use UltiSnippets as my snippet manager.
Now, you can have certain kind of snippets for certain kinds of languages. For example, you might have snippets for python, while having different snippets for LaTeX.
You can take a look over here to see all of my LaTeX snippets, but I will be going over the most important ones in this article.
Installing Snippets Like before, put this in plugins.lua, or wherever you keep your plugins at:
use { &amp;#39;https://github.com/SirVer/ultisnips&amp;#39; } &amp;#34; If you use packer After you install that, now run:
:PackerInstall &amp;#34; If you use packerCongrats, you have installed UltiSnippets. Now, to start us off, let&amp;rsquo;s install some snippets, that we can later on configure. To do that we need to install another plugin:
use { &amp;#39;https://github.com/honza/vim-snippets&amp;#39; } &amp;#34; If you use packer Next section, I will go over how to add/modify snippets yourself.
Adding snippets To add snippets, you first must configure UltiSnips itself. Now, add this to you&amp;rsquo;re init.vim or .vimrc:
let g:UltiSnipsExpandTrigger=&amp;#39;&amp;lt;tab&amp;gt;&amp;#39;let g:UltiSnipsJumpForwardTrigger=&amp;#39;&amp;lt;tab&amp;gt;&amp;#39;let g:UltiSnipsJumpBackwardTrigger=&amp;#39;&amp;lt;s-tab&amp;gt;&amp;#39;let g:UltiSnipsEditSplit=&amp;#39;vertical&amp;#39;let g:UltiSnipsSnippetDirectories=[&amp;#39;~/.config/nvim/UltiSnips/&amp;#39;]Let&amp;rsquo;s go over these quickly. The first line is telling UltiSnips what button you want to use to expand the actual snippet. After you have expanded the snippet, you have placeholders.
On line 2-3, you are telling UltiSnips what key presses you want to use to jump back and forth between those placeholders.
The 4th line is telling UltiSnips to open the file vertically when you run :UltiSnipsEdit.
he last and final line tells UltiSnips where to find your snippets.
Creating your own snippets Place your snippets in ~/.config/nvim/UltiSnips/ or wherever you told UltiSnips to find theme. Each language has it&amp;rsquo;s own specific snippet file. For example, python snippets will be located at ~/.config/nvim/UltiSnips/python.snippets.
Or, instead of manually creating that file, open a file with that extension. For example: test.py. Then, inside that file, type :UltiSnipsEdit. That will create the file ~/.config/nvim/UltiSnips/python.snippets for you.
Here is a basic skeleton for a snippet:
snippet SNIPPET NAME &amp;#34;SNIPPET DESCRIPTION&amp;#34; ... endsnippet To add placeholders, do this:
snippet document &amp;#34;Creates a document&amp;#34; Document Name: $1 $0 endsnippet The $1 and $0 are where your placeholders will be. The $0 is always the final placeholder. Now, you can create information within the placeholders like this:
snippet document &amp;#34;Creates a document&amp;#34; Document Name: ${1:DOCUMENT NAME} $0 endsnippet Now, the placeholder says DOCUMENT NAME, and when you reach that placeholder, it will be highlighted in visual mode, and you can overwrite it.
Now you know the basics, let&amp;rsquo;s get into some examples.
Sign The code for this is probably the simplest.
Here is the snippet code for it:
snippet sign &amp;#34;Signature&amp;#34; Yours sincerely, Hashem A. Damrah endsnippet Today and Date You can also run shell commands inside snippets, but you have to use back ticks (``) for that.
Here is the snippet code for it:
snippet date-time &amp;#34;Today&amp;#39;s date and Current Time&amp;#34; `date &amp;#34;&#43;%b %d %Y %a %R` endsnippet Environments To insert an environment, all I have to do is type beg. I created this snippet in a special manner. It only triggers whenever it&amp;rsquo;s the first word typed on the line. Also, you don&amp;rsquo;t need to hit TAB because it will automatically expand for you.
You start typing out what kind of environment you want. Then, once you&amp;rsquo;re done, hit tab. That will move you into the environment.
snippet beg &amp;#34;begin{} / end{}&amp;#34; bA \begin{$1} ${1:${VISUAL}} \end{$1} endsnippet Now, I have a ton of different environments that I commonly use. So, like the good programmer I am, I decided to waste even more time creating specific snippets for each environment:
Now, sometimes you may want to surround specific text with the environment. So, what do you do? You can remove the text, create the environment, then paste. That feels WRONG. As you all know, us programmers are the laziest people. We spend hours trying to configure something to save us a couple of minutes. And, guess what? That&amp;rsquo;s exactly what I did. I read through the documentation to learn about this (which took about 1.5 hours.)
It&amp;rsquo;s called visual select tab. You highlight whatever you want, hit tab, then go ahead and activate the snippet. There you go, the code you highlighted is know surrounded with the envrionment you want! üòÆ‚Äçüí®
snippet doc &amp;#34;Document&amp;#34; bA \begin{document} ${1:${VISUAL}} \end{document} endsnippet snippet cnt &amp;#34;Center&amp;#34; bA \begin{center} ${1:${VISUAL}} \end{center} endsnippet snippet desc &amp;#34;Description&amp;#34; bA \begin{description} ${1:${VISUAL}} \end{description} endsnippet snippet lemma &amp;#34;Lemma&amp;#34; bA \begin{lemma} ${1:${VISUAL}} \end{lemma} endsnippet snippet prop &amp;#34;Proposition&amp;#34; bA \begin{prop}[$1] ${2:${VISUAL}} \end{prop} endsnippet snippet thrm &amp;#34;Theorem&amp;#34; bA \begin{theorem}[$1] ${2:${VISUAL}} \end{theorem} endsnippet snippet post &amp;#34;postulate&amp;#34; bA \begin{postulate}[$1] ${2:${VISUAL}} \end{postulate} endsnippet snippet myprf &amp;#34;Proof&amp;#34; bA \begin{myproof}[$1] ${2:${VISUAL}} \end{myproof} endsnippet snippet def &amp;#34;Definition&amp;#34; bA \begin{definition}[$1] ${2:${VISUAL}} \end{definition} endsnippet snippet nte &amp;#34;Note&amp;#34; bA \begin{note}[$1] ${2:${VISUAL}} \end{note} endsnippet snippet prob &amp;#34;Problem&amp;#34; bA \begin{problem}[$1] ${2:${VISUAL}} \end{problem} endsnippet snippet corl &amp;#34;Corollary&amp;#34; bA \begin{corollary}[$1] ${2:${VISUAL}} \end{corollary} endsnippet snippet exp &amp;#34;Example&amp;#34; bA \begin{example}[$1] ${2:${VISUAL}} \end{example} endsnippet snippet ntion &amp;#34;Notation&amp;#34; bA \begin{notation}[$1] ${2:${VISUAL}} \end{notation} endsnippet snippet rep &amp;#34;Repetition&amp;#34; bA \begin{repetition}[$1] ${2:${VISUAL}} \end{repetition} endsnippet snippet prop &amp;#34;Property&amp;#34; bA \begin{property}[$1] ${2:${VISUAL}} \end{property} endsnippet snippet int &amp;#34;Intuition&amp;#34; bA \begin{intuition}[$1] ${2:${VISUAL}} \end{intuition} endsnippet snippet obs &amp;#34;Observation&amp;#34; bA \begin{observation}[$1] ${2:${VISUAL}} \end{observation} endsnippet snippet conc &amp;#34;Conclusion&amp;#34; bA \begin{conclusion}[$1] ${2:${VISUAL}} \end{conclusion} endsnippet snippet fig &amp;#34;Figure environment&amp;#34; bA \begin{figure}[${1:htpb}] \centering ${2:\includegraphics[width=0.8\textwidth]{$3}} \caption{${4:$3}} \label{fig:${5:${3/\W&#43;/-/g}}} \end{figure} endsnippet snippet enum &amp;#34;Enumerate&amp;#34; bA \begin{enumerate} \item ${1:${VISUAL}} \end{enumerate} endsnippet snippet item &amp;#34;Itemize&amp;#34; bA \begin{itemize} \item ${1:${VISUAL}} \end{itemize} endsnippet snippet case &amp;#34;cases&amp;#34; bA \begin{cases} ${1:${VISUAL}} \end{cases} endsnippet snippet ali &amp;#34;Align&amp;#34; bA \begin{align*} ${1:${VISUAL}} .\end{align*} endsnippet The b means If the trigger word is the first word on the line, and no writing comes afterword, then expand. The A means Expand without the trigger key, just expand right after the person types the trigger word.
Inline and Display Math These are my two most frequency used snippets. They are responsible for bringing me into math mode. They are im (Inline Math) and dm (Display Math).
snippet im &amp;#34;Inline Math&amp;#34; wA $${1}$`!p if t[2] and t[2][0] not in [&amp;#39;,&amp;#39;, &amp;#39;.&amp;#39;, &amp;#39;?&amp;#39;, &amp;#39;-&amp;#39;, &amp;#39; &amp;#39;]: snip.rv = &amp;#39; &amp;#39; else: snip.rv = &amp;#39;&amp;#39; `$2 endsnippet snippet dm &amp;#34;Display Math&amp;#34; wAb \[ ${1:${VISUAL}} .\] $0 endsnippet The A at the end of the snippet declaration means it will expand as soon as you type the key (im, dm). It doesn&amp;rsquo;t wait for you to hit tab.
The w at the end of the first line means that this snippet will expand at word boundaries. So, helloim won&amp;rsquo;t expand, but hello im will.
The b means it won&amp;rsquo;t expand unless it&amp;rsquo;s at the beginning and the first word on the line. So, hello dm won&amp;rsquo;t expand, but dm hello will.
Sub and Super scripts Sub Scripts Another handy snippet are these ones, which is used for sub scripts. It changes a1 to a_1 and a_12 to a_{12} and a_{12}3 to a_{123}. It can also change a_{123456789}0 to a_{1234567890}. Here, size doesn&amp;rsquo;t matter!
The code for these snippets use regular expressions for there trigger. The first expands if there is a variable, followed by a number. Example b3 -&amp;gt; b_3. Here is the snippet code:
snippet &amp;#39;([A-Za-z])(\d)&amp;#39; &amp;#34;Auto subscript&amp;#34; wrA `!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)` endsnippet The second snippet checks if there is a variable, followed by an underscore, followed by two numbers. Example b_34 -&amp;gt; b_{34}. Here is the snippet code:
snippet &amp;#39;([A-Za-z])_(\d\d)&amp;#39; &amp;#34;Auto subscript 2&amp;#34; wrA `!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`} endsnippet The last and final snippet checks if there is a variable, followed by an underscore, followed by a group of {} with numbers inside. It also checks if there is a number in front of the closing bracket. Example b_{34}5 -&amp;gt; b_{345}
Here is the snippet code:
snippet &amp;#39;([A-Za-z])_\{(\d&#43;)\}(\d)&amp;#39; &amp;#34;Auto subscript 3&#43;&amp;#34; wrA `!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2) &#43; match.group(3)`} endsnippet I also created a quick snippet that puts you in subscript mode:
snippet __ &amp;#34;Super Script&amp;#34; Aw _{$1}$0 endsnippet Super Scripts As for the superscripts, I use td -&amp;gt; ^{}. However, I use some quick snippets for basic things like squaring, cubing, raising to a variable. Here is a quick view of the snippets:
 sq -&amp;gt; ^2 cb -&amp;gt; ^3 ss -&amp;gt; ^{$1}$0 rd -&amp;gt; ^{($1)}$0 compl -&amp;gt; ^{c} invs -&amp;gt; ^{-1}  Here are the snippets:
snippet sq &amp;#34;Square&amp;#34; Aw ^2 endsnippet snippet cb &amp;#34;Cube&amp;#34; Aw ^3 endsnippet snippet ss &amp;#34;Super Script&amp;#34; Aw ^{$1}$0 endsnippet snippet rd &amp;#34;to the ... power&amp;#34; Aw ^{($1)}$0 endsnippet snippet compl &amp;#34;Complement&amp;#34; Aw ^{c} endsnippet snippet invs &amp;#34;inverse&amp;#34; Aw ^{-1} endsnippet Fractions These snippets, are the funniest and they give you a big satisfaction whenever you pull them off.
Here is my goal. To be able to perform snippets on these:
 // -&amp;gt; \frac{}{}3/ -&amp;gt; \frac{3}{}4\i^2/ -&amp;gt; \frac{4\pi^2}{}(1 &#43; 2 &#43; 3) -&amp;gt; \frac{(1 &#43; 2 &#43; 3)}{}(1 &#43; (2 &#43; 3)/) -&amp;gt; (1 &#43; \frac{(1 &#43; 2))}{}(1 &#43; (2 &#43; 3))/ -&amp;gt; \frac{1 &#43; (2 &#43; 3)}{} Now, let&amp;rsquo;s start off with something very easy. Creating a simple fraction:
snippet // &amp;#34;Fraction&amp;#34; iA \frac{$1}{$2}$0 endsnippet The core of the second snippet is regular expressions. It&amp;rsquo;s used to match expressions like:
 \pi^{2}/ 39_{9\Theta}/ cf_2 etc  snippet &amp;#39;((\d&#43;)|(\d*)(\\)?([A-Za-z]&#43;)((\^|_)(\{\d&#43;\}|\d))*)/&amp;#39; &amp;#34;Fraction&amp;#34; wrA \\frac{`!p snip.rv = match.group(1)`}{$1}$0 endsnippet In the fourth case, I tried to find matching parenthesis. But, all of the work went in vain because you cannot with UltiSnips. So, I used Python :).
priority 1000 snippet &amp;#39;^.*\)/&amp;#39; &amp;#34;() Fraction&amp;#34; wrA `!p stripped = match.string[:-1] depth = 0 i = len(stripped) - 1 while True: if stripped[i] == &amp;#39;)&amp;#39;: depth &#43;= 1 if stripped[i] == &amp;#39;(&amp;#39;: depth -= 1 if depth == 0: break; i -= 1 snip.rv = stripped[0:i] &#43; &amp;#34;\\frac{&amp;#34; &#43; stripped[i&#43;1:-1] &#43; &amp;#34;}&amp;#34; `{$1}$0 endsnippet The last section that I want to show you is your selection to make your own fraction using visual mode.
snippet / &amp;#34;Fraction&amp;#34; iA \\frac{${VISUAL}}{$1}$0 endsnippet Template snippet template &amp;#34;Template&amp;#34; \documentclass{article} \usepackage{import} \usepackage{pdfpages} \usepackage{transparent} \usepackage{xcolor} $1 \newcommand{\incfig}[2][1]{% \def\svgwidth{#1\columnwidth} \import{./figures/}{###pdf_tex} } $2 \pdfsuppresswarningpagegroup=1 \begin{document} $0 \end{document} endsnippet School lessons I don&amp;rsquo;t really use these that often because I created scripts that do a lot of work when:
 Organizing Changing Switching Loading Reloading  Between:
 Classes Lessons Lectures  You can find these scripts here, but eventually, I will create a blog post about how I made those scripts, how I use them, etc.
snippet les &amp;#34;Lesson&amp;#34; \lesson{${1:LESSON NUMBER}}{`date &amp;#34;&#43;%b %d %Y %a (%H:%M:%S)&amp;#34;`}{${3:LESSON NAME}} $0 endsnippet snippet lec &amp;#34;Lecture&amp;#34; \lecture{${1:LECTURE NUMBER}}{`date &amp;#34;&#43;%b %d %Y %a (%H:%M:%S)&amp;#34;`}{${3:LECTURE NAME}} $0 endsnippet Correct spelling mistakes I use this a TON. It&amp;rsquo;s so handy because I don&amp;rsquo;t have to leave insert mode, hover over the word, press z=, select the correct word, then go all the way back. UHHH, that was a lot of work! Also, if the word isn&amp;rsquo;t corrected correctly, I can exit insert mode, press u, and select the correct word, and from now on, it will always be corrected to the correct one, which is the one that I chose. AMAZING!
Now, put this in your init.vim or .vimrc:
setlocal spellset spelllang=eninoremap &amp;lt;C-l&amp;gt; &amp;lt;C-g&amp;gt;u&amp;lt;Esc&amp;gt;[s1z=`]a&amp;lt;C-g&amp;gt;uCredit I would like to give a thanks üëè to Gilles Castel for teaching me all of this stuff. I would recommend to go and checkout his website!
Conclusion So, I have just proven to you that you can write LaTeX
 fast easily efficiently  Stay tuned to learn about how I:
 draw figures manage my notes take notes  </content>
    </entry>
    
</search>