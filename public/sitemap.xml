<search><entry><title>Hashem A. Damrah</title><url>https://damrah.netlify.app/post/note-taking-with-latex-part-1/</url><categories/><tags><tag>latex</tag><tag>tutorial</tag><tag>school</tag><tag>notes</tag></tags><content type="html"> For a very long time, I have been trying to create the perfect setup for note taking in general (but more specifically, for math). Before, I used to use notion to take my notes, which was okay, but I wanted something much more productive. And thus, my system was BORN!
Here are how some of my notes look like:
If you want to see how my completed notes look like, visit here. I also store all of my notes here.
I created this method during the summer of my 10th year in school. I am preparing my self for when I go to university. So I set myself 4 goals and these goals must be met for me to use the system.
They are:
Writing mathematical equations as fast (or faster) than my professor was an A MUST. Drawing the figures must be as easy, fast, and simple. It must feel like I am writing them on paper. My notes are very easily manageable and easy to access. I will eventually have a ton of posts talking about this specific subject, but for now, I will go over Step 1.
NeoVim and LaTeX NeoVim is a terminal-based text editor. It&amp;rsquo;s just a better version of Vim, which was made back in the 60s (I think).
I literally use NeoVim for everything. (You can find my custom NeoVim config here).
LaTeX is a markup language used by mostly professors who want to publish their papers. Also, nerds like me, spend countless weeks trying to figure out the perfect setup for note-taking. Luckily, for you, you won&amp;rsquo;t have to figure anything out because I&amp;rsquo;ve done all of that for you.
Now, with that out of the way, here is what my screen looks like when I am working with LaTeX:
On the left side, I have my editor (NeoVim) and on the right side, I have my pdf viewer Zathura.
Here is a quick list of all of my utilities:
OS (Operating System): Arch Linux WM (Window Manager): DWM Text Editor: NeoVim Pdf Viewer: Zathura I have a huge list of plugins that you can view here), but the plugin that I use for LaTeX is vimtex. It provides:
Syntax highlighting Auto compiling Renaming entire environments Shows you the toc (Table of Contents) But, before I talk about how I configure NeoVim for LaTeX, let me explain to you how I setup my NeoVim. This won&amp;rsquo;t be an in depth tutorial (that will be in a different post.)
For installing my plugins, I don&amp;rsquo;t use a package manager. I use Git Submodules. Here&amp;rsquo;s an example:
git submodule add --name &amp;#34;vimtex&amp;#34; https://github.com/lervag/vimtex pack/bundle/opt/vimtex/ If you look at my .gitmodules. you can see all of my plugins.
If you install plugin this way, they won&amp;rsquo;t load. You have to load it yourself. Here&amp;rsquo;s how I do it:
local autoload = function(base) local storage = {} local mt = { __index = function(_, key) if storage[key] == nil then storage[key] = require(base .. &amp;#39;.&amp;#39; .. key) end return storage[key] end } return setmetatable({}, mt) end return autoload Put this in: lua/github-username/autoload.lua. Then, add this in your lua/github-username/init.lua:
local autoload = require(&amp;#39;github-username.autoload&amp;#39;) local github-username = autoload(&amp;#39;github-username&amp;#39;) -- Using a real global here to make sure anything stashed in here (and -- in `SingularisArt.g`) survives even after the last reference to it goes away. _G.github-username = github-username return github-username Replace github-username with your GitHub username. What it&amp;rsquo;s doing is it&amp;rsquo;s calling all of my configuration files within my lua/SingularisArt directory, then returning them for me to access them in my main init.lua.
Now, here&amp;rsquo;s how I call each plugin:
if vim.o.loadplugins then ... SingularisArt.plugin.load(&amp;#34;vimtex&amp;#34;) ... end This is just calling the plugin, which is stored in pack/bundle/opt. If you don&amp;rsquo;t want to have a plugin load, then just comment out the line that calls it, and it won&amp;rsquo;t be called.
Now, back to LaTeX, I use a gazillion plugins (You can view them all here), but the most powerful one for LaTeX users is VimTex.
I&amp;rsquo;m going to assume that you already know how to install plugins and you already have a plugin manager. If you haven&amp;rsquo;t already, go ahead and install the VimTex plugin.
Now, time to configure it. Add this to your init.vim or .vimrc:
let g:vimtex_view_method=&amp;#39;zathura&amp;#39; let g:tex_flavor=&amp;#39;latex&amp;#39; set conceallevel=1 The first line tells VIMTEX what pdf viewer you want to use to open your pdf. Simple. The next line tells what kind of LaTeX you want to use to compile your document. The last line tell NeoVim to configure the concealment level.
This is a feature that NeoVim uses to hide certain parts of the code if your cursor isn&amp;rsquo;t on it. It hides \[, \], $. By making \[, \], $ invisible, they aren&amp;rsquo;t so distracting. Here&amp;rsquo;s a quick demo:
Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Snippets What are Snippets One of the major reasons why I&amp;rsquo;m so fast at typing when it comes to LaTeX, is because of snippets.
A snippet is a short reusable piece of text that can be triggered by some other text.
Then, you have snippet managers, which manages the snippets that you make. There are many snippet managers out there, but I use UltiSnippets as my snippet manager.
Now, you can have certain kind of snippets for certain kinds of languages. For example, you might have snippets for python, while having different snippets for LaTeX.
You can take a look over VimTehere to see all of my LaTeX snippets, but I will be going over the most important ones in this article.
Installing Snippets Like before, go ahead and install these plugins:
https://github.com/SirVer/ultisnips https://github.com/honza/vim-snippets https://github.com/hrsh7th/nvim-cmp The first plugin (ultisnips) is the snippet manager. The second plugin (vim-snippets) has all of the UltiSnips snippets. The third plugin (nvim-cmp) is a completion engine.
Here&amp;rsquo;s a quick demo using all of these three plugins:
You&amp;rsquo;re gonna have to create a directory called: after/plugin/. This is where you&amp;rsquo;re going to put your configuration in. The reason you put all of your plugin configuration here is because NeoVim will run all of the .lua files within this directory. This means you don&amp;rsquo;t have to manually require each file.
Create a file called after/plugin/cmp.lua and place this configuration in it.
vim.cmd([[set completeopt=menuone,noinsert,noselect]]) local cmp_status, cmp = pcall(require, &amp;#34;cmp&amp;#34;) if not cmp_status then vim.notify(&amp;#34;Please Install &amp;#39;cmp&amp;#39;&amp;#34;) return end local kind_icons = { Class = &amp;#34; &amp;#34;, Color = &amp;#34; &amp;#34;, Constant = &amp;#34;ﲀ &amp;#34;, Constructor = &amp;#34; &amp;#34;, Enum = &amp;#34;練&amp;#34;, EnumMember = &amp;#34; &amp;#34;, Event = &amp;#34; &amp;#34;, Field = &amp;#34; &amp;#34;, File = &amp;#34;&amp;#34;, Folder = &amp;#34; &amp;#34;, Function = &amp;#34; &amp;#34;, Interface = &amp;#34;ﰮ &amp;#34;, Keyword = &amp;#34; &amp;#34;, Method = &amp;#34; &amp;#34;, Module = &amp;#34; &amp;#34;, Operator = &amp;#34;&amp;#34;, Property = &amp;#34; &amp;#34;, Reference = &amp;#34; &amp;#34;, Snippet = &amp;#34; &amp;#34;, Struct = &amp;#34; &amp;#34;, Text = &amp;#34; &amp;#34;, TypeParameter = &amp;#34; &amp;#34;, Unit = &amp;#34;塞&amp;#34;, Value = &amp;#34; &amp;#34;, Variable = &amp;#34; &amp;#34;, } Vscode = vim.lsp.protocol.make_client_capabilities() local source_mapping = { nvim_lsp = &amp;#34;(LSP)&amp;#34;, nvim_lua = &amp;#34;(Lua)&amp;#34;, latex_symbols = &amp;#34;(LaTeX)&amp;#34;, ultisnips = &amp;#34;(Snippet)&amp;#34;, cmp_tabnine = &amp;#34;(TabNine)&amp;#34;, calc = &amp;#34;(Calculator)&amp;#34;, gh_issues = &amp;#34;(Issues)&amp;#34;, path = &amp;#34;(Path)&amp;#34;, buffer = &amp;#34;(Buffer)&amp;#34;, emoji = &amp;#34;(Emoji)&amp;#34;, spell = &amp;#34;(Spell)&amp;#34;, } Capabilities = require(&amp;#34;cmp_nvim_lsp&amp;#34;).update_capabilities(vim.lsp.protocol.make_client_capabilities()) Vscode.textDocument.completion.completionItem.snippetSupport = true cmp.setup({ snippet = { -- REQUIRED - you must specify a snippet engine expand = function(args) vim.fn[&amp;#34;UltiSnips#Anon&amp;#34;](args.body) -- For `ultisnips` users. --require(&amp;#39;luasnip&amp;#39;).lsp_expand(args.body) -- For `luasnip` users. -- require(&amp;#39;snippy&amp;#39;).expand_snippet(args.body) -- For `snippy` users. end, enabled = function() local lnum, col = vim.fn.line(&amp;#39;.&amp;#39;), math.min(vim.fn.col(&amp;#39;.&amp;#39;), #vim.fn.getline(&amp;#39;.&amp;#39;)) for _, syn_id in ipairs(vim.fn.synstack(lnum, col)) do syn_id = vim.fn.synIDtrans(syn_id) -- Resolve :highlight links if vim.fn.synIDattr(syn_id, &amp;#39;name&amp;#39;) == &amp;#39;Comment&amp;#39; then return false end end return true end, }, mapping = { [&amp;#34;&amp;lt;C-y&amp;gt;&amp;#34;] = cmp.config.disable, -- Specify `cmp.config.disable` if you want to remove the default `&amp;lt;C-y&amp;gt;` mapping. [&amp;#34;&amp;lt;C-k&amp;gt;&amp;#34;] = cmp.mapping.select_prev_item(), [&amp;#34;&amp;lt;C-j&amp;gt;&amp;#34;] = cmp.mapping.select_next_item(), [&amp;#34;&amp;lt;A-p&amp;gt;&amp;#34;] = cmp.mapping.scroll_docs(-4), [&amp;#34;&amp;lt;A-n&amp;gt;&amp;#34;] = cmp.mapping.scroll_docs(4), [&amp;#34;&amp;lt;C-b&amp;gt;&amp;#34;] = cmp.mapping(cmp.mapping.complete(), { &amp;#34;i&amp;#34;, &amp;#34;c&amp;#34; }), [&amp;#34;&amp;lt;CR&amp;gt;&amp;#34;] = cmp.mapping.confirm({ select = true }), [&amp;#34;&amp;lt;C-e&amp;gt;&amp;#34;] = cmp.mapping({ i = cmp.mapping.abort(), c = cmp.mapping.close(), }), }, documentation = { border = { &amp;#34;╭&amp;#34;, &amp;#34;─&amp;#34;, &amp;#34;╮&amp;#34;, &amp;#34;│&amp;#34;, &amp;#34;╯&amp;#34;, &amp;#34;─&amp;#34;, &amp;#34;╰&amp;#34;, &amp;#34;│&amp;#34; }, }, sources = cmp.config.sources({ { name = &amp;#34;nvim_lsp&amp;#34; }, { name = &amp;#34;nvim_lua&amp;#34; }, { name = &amp;#34;latex_symbols&amp;#34; }, { name = &amp;#34;ultisnips&amp;#34; }, { name = &amp;#34;cmp_tabnine&amp;#34; }, { name = &amp;#34;calc&amp;#34; }, { name = &amp;#34;gh_issues&amp;#34; }, { name = &amp;#34;path&amp;#34; }, { name = &amp;#34;buffer&amp;#34; }, { name = &amp;#34;emoji&amp;#34; }, { name = &amp;#34;spell&amp;#34; }, }), experimental = { native_menu = false, ghost_text = true, }, formatting = { format = function(entry, vim_item) vim_item.kind = kind_icons[vim_item.kind] local menu = source_mapping[entry.source.name] if entry.source.name == &amp;#34;cmp_tabnine&amp;#34; then if entry.completion_item.data ~= nil and entry.completion_item.data.detail ~= nil then menu = entry.completion_item.data.detail .. &amp;#34; &amp;#34; .. menu end vim_item.kind = &amp;#34;&amp;#34; end vim_item.menu = menu return vim_item end, }, }) cmp.setup.cmdline(&amp;#34;:&amp;#34;, { sources = { { name = &amp;#34;cmdline&amp;#34; }, }, }) local Job = require(&amp;#34;plenary.job&amp;#34;) local source = {} source.new = function() local self = setmetatable({ cache = {} }, { __index = source }) return self end source.complete = function(self, _, callback) local bufnr = vim.api.nvim_get_current_buf() -- This just makes sure that we only hit the GH API once per session. -- -- You could remove this if you wanted, but this just makes it so we&amp;#39;re -- good programming citizens. if not self.cache[bufnr] then Job :new({ -- Uses `gh` executable to request the issues from the remote repository. &amp;#34;gh&amp;#34;, &amp;#34;issue&amp;#34;, &amp;#34;list&amp;#34;, &amp;#34;--limit&amp;#34;, &amp;#34;1000&amp;#34;, &amp;#34;--json&amp;#34;, &amp;#34;title,number,body&amp;#34;, on_exit = function(job) local result = job:result() local ok, parsed = pcall(vim.json.decode, table.concat(result, &amp;#34;&amp;#34;)) if not ok then vim.notify &amp;#34;Failed to parse gh result&amp;#34; return end local items = {} for _, gh_item in ipairs(parsed) do gh_item.body = string.gsub(gh_item.body or &amp;#34;&amp;#34;, &amp;#34;\r&amp;#34;, &amp;#34;&amp;#34;) table.insert(items, { label = string.format(&amp;#34;#%s&amp;#34;, gh_item.number), documentation = { kind = &amp;#34;markdown&amp;#34;, value = string.format(&amp;#34;# %s\n\n%s&amp;#34;, gh_item.title, gh_item.body), }, }) end callback { items = items, isIncomplete = false } self.cache[bufnr] = items end, }) :start() else callback { items = self.cache[bufnr], isIncomplete = false } end end source.get_trigger_characters = function() return { &amp;#34;#&amp;#34; } end source.is_available = function() return vim.bo.filetype == &amp;#34;gitcommit&amp;#34; end Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Next section, I will go over how to add/modify snippets yourself.
Adding Snippets To add snippets, you first must configure UltiSnips itself. Now, add this to you&amp;rsquo;re init.vim or .vimrc:
let g:UltiSnipsExpandTrigger=&amp;#39;&amp;lt;tab&amp;gt;&amp;#39; let g:UltiSnipsJumpForwardTrigger=&amp;#39;&amp;lt;tab&amp;gt;&amp;#39; let g:UltiSnipsJumpBackwardTrigger=&amp;#39;&amp;lt;s-tab&amp;gt;&amp;#39; let g:UltiSnipsEditSplit=&amp;#39;vertical&amp;#39; let g:UltiSnipsSnippetDirectories=[&amp;#39;~/.config/nvim/UltiSnips/&amp;#39;] Let&amp;rsquo;s go over these quickly. The first line is telling UltiSnips what button you want to use to expand the actual snippet. After you have expanded the snippet, you have placeholders.
On line 2-3, you are telling UltiSnips what key presses you want to use to jump back and forth between those placeholders.
The 4th line is telling UltiSnips to open the file vertically when you run :UltiSnipsEdit.
The last and final line tells UltiSnips where to find your snippets.
Creating your own Snippets Place your snippets in ~/.config/nvim/UltiSnips/ or wherever you told UltiSnips to find theme. Each language has it&amp;rsquo;s own specific snippet file. For example, python snippets will be located at ~/.config/nvim/UltiSnips/python.snippets.
Or, instead of manually creating that file, open a file with that extension. For example: test.py. Then, inside that file, type :UltiSnipsEdit. That will create the file ~/.config/nvim/UltiSnips/python.snippets for you.
Here is a basic skeleton for a snippet:
snippet SNIPPET NAME &amp;#34;SNIPPET DESCRIPTION&amp;#34; ... endsnippet To add placeholders, do this:
snippet document &amp;#34;Creates a document&amp;#34; Document Name: $1 $0 endsnippet The $1 and $0 are where your placeholders will be. The $0 is always the final placeholder. Now, you can create information within the placeholders like this:
snippet document &amp;#34;Creates a document&amp;#34; Document Name: ${1:DOCUMENT NAME} $0 endsnippet Now, the placeholder says DOCUMENT NAME, and when you reach that placeholder, it will be highlighted in visual mode, and you can overwrite it.
Now you know the basics, let&amp;rsquo;s get into some examples.
The code for this is probably the simplest.
Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Here is the snippet code for it:
snippet sign &amp;#34;Signature&amp;#34; Yours sincerely, Hashem A. Damrah endsnippet You can also run shell commands inside snippets, but you have to use back ticks (``) for that.
Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Here is the snippet code for it:
snippet date-time &amp;#34;Today&amp;#39;s date and Current Time&amp;#34; `date &amp;#34;+%b %d %Y %a %R` endsnippet You can even combine snippets:
TODO: Add combine
LaTeX Snippets Environments To insert an environment, all I have to do is type beg. I created this snippet in a special manner. It only triggers whenever it&amp;rsquo;s the first word typed on the line. Also, you don&amp;rsquo;t need to hit TAB because it will automatically expand for you.
You start typing out what kind of environment you want. Then, once you&amp;rsquo;re done, hit tab. That will move you into the environment.
snippet beg &amp;#34;begin{} / end{}&amp;#34; bAi \begin{$1} ${VISUAL}$2 \end{$1}$0 endsnippet Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Now, I have a ton of different environments that I commonly use. So, like the good programmer I am, I decided to waste even more time creating specific snippets for each environment:
Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Now, sometimes you may want to surround specific text with the environment. So, what do you do? You can remove the text, create the environment, then paste. That feels WRONG. As you all know, us programmers are the laziest people. We spend hours trying to configure something to save us a couple of minutes. And, guess what? That&amp;rsquo;s exactly what I did. I read through the documentation to learn about this (which took about 1.5 hours.)
It&amp;rsquo;s called visual select tab. You highlight whatever you want, hit tab, then go ahead and activate the snippet. There you go, the code you highlighted is know surrounded with the environment you want!
snippet doc &amp;#34;Document&amp;#34; bAi \begin{document} ${VISUAL}$1 \end{document}$0 endsnippet snippet cnt &amp;#34;Center&amp;#34; bAi \begin{center} ${VISUAL}$1 \end{center}$0 endsnippet snippet desc &amp;#34;Description&amp;#34; bAi \begin{description} ${VISUAL}$1 \end{description}$0 endsnippet snippet lemma &amp;#34;Lemma&amp;#34; bAi \begin{lemma} ${VISUAL}$1 \end{lemma}$0 endsnippet snippet prop &amp;#34;Proposition&amp;#34; bAi \begin{prop}[$1] ${VISUAL}$2 \end{prop}$0 endsnippet snippet thrm &amp;#34;Theorem&amp;#34; bAi \begin{theorem}[$1] ${VISUAL}$2 \end{theorem}$0 endsnippet snippet post &amp;#34;postulate&amp;#34; bAi \begin{postulate}[$1] ${VISUAL}$2 \end{postulate}$0 endsnippet snippet prf &amp;#34;Proof&amp;#34; bAi \begin{proof}[$1] ${VISUAL}$2 \end{proof}$0 endsnippet snippet def &amp;#34;Definition&amp;#34; bAi \begin{definition}[$1] ${VISUAL}$2 \end{definition}$0 endsnippet snippet nte &amp;#34;Note&amp;#34; bAi \begin{note}[$1] ${VISUAL}$2 \end{note}$0 endsnippet snippet prob &amp;#34;Problem&amp;#34; bAi \begin{problem}[$1] ${VISUAL}$2 \end{problem}$0 endsnippet snippet corl &amp;#34;Corollary&amp;#34; bAi \begin{corollary}[$1] ${VISUAL}$2 \end{corollary}$0 endsnippet snippet exm &amp;#34;Example&amp;#34; bAi \begin{example}[$1] ${VISUAL}$2 \end{example}$0 endsnippet snippet ntn &amp;#34;Notation&amp;#34; bAi \begin{notation}[$1] ${VISUAL}$2 \end{notation}$0 endsnippet snippet rep &amp;#34;Repetition&amp;#34; bAi \begin{repetition}[$1] ${VISUAL}$2 \end{repetition}$0 endsnippet snippet prop &amp;#34;Property&amp;#34; bAi \begin{property}[$1] ${VISUAL}$2 \end{property}$0 endsnippet snippet int &amp;#34;Intuition&amp;#34; bAi \begin{intuition}[$1] ${VISUAL}$2 \end{intuition}$0 endsnippet snippet obs &amp;#34;Observation&amp;#34; bAi \begin{observation}[$1] ${VISUAL}$2 \end{observation}$0 endsnippet snippet conc &amp;#34;Conclusion&amp;#34; bAi \begin{conclusion}[$1] ${VISUAL}$2 \end{conclusion}$0 endsnippet snippet enum &amp;#34;Enumerate&amp;#34; bAi \begin{enumerate} \item ${VISUAL}$1 \end{enumerate}$0 endsnippet snippet item &amp;#34;Itemize&amp;#34; bAi \begin{itemize} \item ${VISUAL}$1 \end{itemize}$0 endsnippet snippet case &amp;#34;cases&amp;#34; bAi \begin{cases} ${VISUAL}$1 \end{cases}$0 endsnippet snippet ali &amp;#34;Align*&amp;#34; bAi \begin{align*} ${VISUAL}$1 .\end{align*}$0 endsnippet snippet ali &amp;#34;Align&amp;#34; bAi \begin{align} ${VISUAL}$1 .\end{align}$0 endsnippet snippet eqt &amp;#34;Equation&amp;#34; bAi \begin{equation} \begin{split} ${VISUAL}$1 \end{split} .\end{equation}$0 endsnippet snippet fig &amp;#34;Figure environment&amp;#34; bAi \begin{figure}[${1:htpb}] \centering ${2:\includegraphics[width=0.8\textwidth]{$3}} \caption{${4:$3}} \label{fig:${5:${3/\W+/-/g}}} \end{figure}$0 endsnippet snippet tkz &amp;#34;Tikz pgfplot&amp;#34; bAi endsnippet snippet tab &amp;#34;tabular / array environment&amp;#34; bAi \begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}} $0${2/(?&amp;lt;=.)(c|l|r)|./(?1: &amp;amp; )/g} \end{$1${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}$0 endsnippet snippet tbl &amp;#34;Table environment&amp;#34; bAi \begin{table}[${1:htpb}] \centering \caption{${2:caption}} \label{tab:${3:${2/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}} \begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}} $0${5/(?&amp;lt;=.)(c|l|r)|./(?1: &amp;amp; )/g} \end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}} \end{table}$0 endsnippet pre_expand &amp;#34;create_table(snip)&amp;#34; snippet &amp;#34;gentbl(\d+)x(\d+)&amp;#34; &amp;#34;Generate table of *width* by *height*&amp;#34; wrAbi endsnippet pre_expand &amp;#34;add_row(snip)&amp;#34; snippet &amp;#34;tr(\d+)&amp;#34; &amp;#34;Add table row of dimension ...&amp;#34; wrAbi endsnippet The b means If the trigger word is the first word on the line, and no writing comes afterword, then expand. The A means Expand without the trigger key, just expand right after the person types the trigger word. Inline and Display Math These are my two most frequency used snippets. They are responsible for bringing me into math mode. They are ilm (Inline Math) and dm (Display Math).
Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! snippet ilm &amp;#34;Inline Math&amp;#34; wA $${VISUAL}$1$`!p if t[2] and t[2][0] not in [&amp;#39;,&amp;#39;, &amp;#39;.&amp;#39;, &amp;#39;?&amp;#39;, &amp;#39;-&amp;#39;, &amp;#39; &amp;#39;]: snip.rv = &amp;#39; &amp;#39; else: snip.rv = &amp;#39;&amp;#39; `$2 endsnippet snippet dm &amp;#34;Display Math&amp;#34; wA \[ ${VISUAL}$1 \].$0 endsnippet The A at the end of the snippet declaration means it will expand as soon as you type the key (im, dm). It doesn&amp;rsquo;t wait for you to hit tab.
The w at the end of the first line means that this snippet will expand at word boundaries. So, helloim won&amp;rsquo;t expand, but hello im will.
The b means it won&amp;rsquo;t expand unless it&amp;rsquo;s at the beginning and the first word on the line. So, hello dm won&amp;rsquo;t expand, but dm hello will.
Sub and Super scripts Sub Scripts Another handy snippet are these ones, which is used for sub scripts. It changes a1 to a_1 and a_12 to a_{12} and a_{12}3 to a_{123}. It can also change a_{123456789}0 to a_{1234567890}. Here, size doesn&amp;rsquo;t matter!
Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! The code for these snippets use regular expressions for there trigger. The first expands if there is a variable, followed by a number. Example b3 -&amp;gt; b_3. Here is the snippet code:
snippet &amp;#39;([A-Za-z])(\d)&amp;#39; &amp;#34;Auto subscript&amp;#34; wrA `!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)` endsnippet The second snippet checks if there is a variable, followed by an underscore, followed by two numbers. Example b_34 -&amp;gt; b_{34}. Here is the snippet code:
snippet &amp;#39;([A-Za-z])_(\d\d)&amp;#39; &amp;#34;Auto subscript 2&amp;#34; wrA `!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`} endsnippet The last and final snippet checks if there is a variable, followed by an underscore, followed by a group of {} with numbers inside. It also checks if there is a number in front of the closing bracket. Example b_{34}5 -&amp;gt; b_{345}
Here is the snippet code:
snippet &amp;#39;([A-Za-z])_\{(\d+)\}(\d)&amp;#39; &amp;#34;Auto subscript 3+&amp;#34; wrA `!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2) + match.group(3)`} endsnippet I also created a quick snippet that puts you in subscript mode:
snippet __ &amp;#34;Super Script&amp;#34; Aw _{$1}$0 endsnippet Super Scripts As for the superscripts, I use td -&amp;gt; ^{}. However, I use some quick snippets for basic things like squaring, cubing, raising to a variable. Here is a quick view of the snippets:
sq -&amp;gt; ^2 cb -&amp;gt; ^3 ss -&amp;gt; ^{} rd -&amp;gt; ^{()} compl -&amp;gt; ^{c} invs -&amp;gt; ^{-1} Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Here are the snippets:
snippet sq &amp;#34;Square&amp;#34; Aw ^2 endsnippet snippet cb &amp;#34;Cube&amp;#34; Aw ^3 endsnippet snippet ss &amp;#34;Super Script&amp;#34; Aw ^{$1}$0 endsnippet snippet rd &amp;#34;To The ... Power&amp;#34; Aw ^{($1)}$0 endsnippet snippet compl &amp;#34;Complement&amp;#34; Aw ^{c} endsnippet snippet invs &amp;#34;Inverse&amp;#34; Aw ^{-1} endsnippet Fractions These snippets, are the funniest and they give you a big satisfaction whenever you pull them off.
Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Now, let&amp;rsquo;s start off with something very easy. Creating a simple fraction:
snippet // &amp;#34;Fraction&amp;#34; iA \frac{$1}{$2}$0 endsnippet The core of the second snippet is regular expressions. It&amp;rsquo;s used to match expressions like:
\pi^{2}/ 39_{9\Theta}/ cf_2 etc snippet &amp;#39;((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/&amp;#39; &amp;#34;Fraction&amp;#34; wrA \\frac{`!p snip.rv = match.group(1)`}{$1}$0 endsnippet In the fourth case, I tried to find matching parenthesis. But, all of the work went in vain because you cannot with UltiSnips. So, I used Python :).
priority 1000 snippet &amp;#39;^.*\)/&amp;#39; &amp;#34;() Fraction&amp;#34; wrA `!p stripped = match.string[:-1] depth = 0 i = len(stripped) - 1 while True: if stripped[i] == &amp;#39;)&amp;#39;: depth += 1 if stripped[i] == &amp;#39;(&amp;#39;: depth -= 1 if depth == 0: break; i -= 1 snip.rv = stripped[0:i] + &amp;#34;\\frac{&amp;#34; + stripped[i+1:-1] + &amp;#34;}&amp;#34; `{$1}$0 endsnippet The last section that I want to show you is your selection to make your own fraction using visual mode.
Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! snippet / &amp;#34;Fraction&amp;#34; iA \\frac{${VISUAL}}{$1}$0 endsnippet Context The number one problem that I had when I first started using UltiSnips was: My snippets kept colliding with me writing text.
For example, let&amp;rsquo;s say you&amp;rsquo;re typing newsroom. Since it has sr, this will expand to \sqrt{}, which will result in new\\sqrt{}oom.
The solution to keep this from happening is to use something called context. This will help us determine if we are in the correct environment to expand the snippet. Here&amp;rsquo;s the code for it:
global !p def math(): return vim.eval(&amp;#39;vimtex#syntax#in_mathzone()&amp;#39;) == &amp;#39;1&amp;#39; def not_math(): return vim.eval(&amp;#39;vimtex#syntax#in_mathzone()&amp;#39;) == &amp;#39;0&amp;#39; def comment(): return vim.eval(&amp;#39;vimtex#syntax#in_comment()&amp;#39;) == &amp;#39;1&amp;#39; def env(name): [x,y] = vim.eval(&amp;#34;vimtex#env#is_inside(&amp;#39;&amp;#34; + name + &amp;#34;&amp;#39;)&amp;#34;) return x != &amp;#39;0&amp;#39; and y != &amp;#39;0&amp;#39; endglobal Now we can add context math() to the snippets you would like to expand only in math mode.
context &amp;#34;math()&amp;#34; snippet sr &amp;#34;Square root&amp;#34; iA \sqrt{$1}$0 endsnippet Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! School lessons I don&amp;rsquo;t really use these that often because I created scripts that do a lot of work when:
Organizing Changing Switching Loading Reloading Between:
Classes Lessons Lectures You can find these scripts here, but eventually, I will create a blog post about how I made those scripts, how I use them, etc.
Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! snippet les &amp;#34;Lesson&amp;#34; \lesson{${1:LESSON NUMBER}}{\`date &amp;#34;+%b %d %Y %a (%H:%M:%S)&amp;#34;\`}{${3:LESSON NAME}} $0 endsnippet snippet lec &amp;#34;Lecture&amp;#34; \lecture{${1:LECTURE NUMBER}}{\`date &amp;#34;+%b %d %Y %a (%H:%M:%S)&amp;#34;\`}{${3:LECTURE NAME}} $0 endsnippet Correct spelling mistakes I use this a TON. It&amp;rsquo;s so handy because I don&amp;rsquo;t have to leave insert mode, hover over the word, press z=, select the correct word, then go all the way back. UHHH, that was a lot of work! Also, if the word isn&amp;rsquo;t corrected correctly, I can exit insert mode, press u, and select the correct word, and from now on, it will always be corrected to the correct one, which is the one that I chose. AMAZING!
Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Now, put this in your init.vim or .vimrc:
setlocal spell set spelllang=en inoremap &amp;lt;C-l&amp;gt; &amp;lt;C-g&amp;gt;u&amp;lt;Esc&amp;gt;[s1z=`]a&amp;lt;C-g&amp;gt;u Auto completion Now, besides snippets helping me out a ton when taking notes, I also have autocompletion.
This is possible by using LSP. LSP is a language server protocol, which allows me to get autocompletion, suggestions, etc based on the language that I&amp;rsquo;m using.
Setting LSP in NeoVim We first need to install these plugins:
https://github.com/neovim/nvim-lspconfig https://github.com/onsails/lspkind-nvim https://github.com/tami5/lspsaga.nvim (Branch name: nvim51) https://github.com/williamboman/nvim-lsp-installer Install your language server Installing your language server is super easy. For a complete list of all of the language servers NeoVim offers, head over here. To install your language server, just run :LspInstall [lang name]. Now, you have your language server installed in NeoVim.
But, you need to server installed on your computer. To do that, head over here and find your language. Follow the link that they provide and install it from there.
For example, I want to have the python language server. So, I just run :LspInstall python in NeoVim. Then, I run pip3 install 'python-lsp-server[all]'. Now, I have my server.
To activate it python, put this in your init.lua:
require(&amp;#39;lspconfig&amp;#39;).pylsp.setup{} But, for me, I have a ton of servers, and my goal is to only keep them growing. So, here is a better way of doing it:
-- LSP Servers to install local capabilities = require(&amp;#39;cmp_nvim_lsp&amp;#39;).update_capabilities(vim.lsp.protocol.make_client_capabilities()) local langservers = { &amp;#39;sumneko_lua&amp;#39;, -- Lua &amp;#39;vimls&amp;#39;, -- Vim &amp;#39;texlab&amp;#39;, -- LaTeX &amp;#39;pylsp&amp;#39;, -- Python &amp;#39;bashls&amp;#39;, -- Bash &amp;#39;clangd&amp;#39;, -- C++,C &amp;#39;omnisharp&amp;#39;, -- C# &amp;#39;cmake&amp;#39;, -- CMake &amp;#39;html&amp;#39;, -- HTML &amp;#39;cssls&amp;#39;, -- CSS &amp;#39;jsonls&amp;#39;, -- JSON &amp;#39;rust_analyzer&amp;#39;, -- Rust &amp;#39;tsserver&amp;#39;, -- Typescript/Javascript &amp;#39;yamlls&amp;#39;, -- Yaml &amp;#39;solc&amp;#39;, -- Solidity &amp;#39;solang&amp;#39;, -- Solidity &amp;#39;solidity_ls&amp;#39;, -- Solidity &amp;#39;dockerls&amp;#39;, -- Docker } for _, server in ipairs(langservers) do if server == &amp;#39;sumneko_lua&amp;#39; then require(&amp;#39;lspconfig&amp;#39;)[server].setup { capabilities = capabilities, settings = { Lua = { diagnostics = { globals = { &amp;#39;vim&amp;#39;, &amp;#39;use&amp;#39; } }, } } } else require(&amp;#39;lspconfig&amp;#39;)[server].setup { capabilities = capabilities } end end Inside of the local langservers, just add your server name and you&amp;rsquo;re good to go. For example, if I want to have the rust language server, just add rust_analyzer to the langservers.
Again, you can get this information from here.
Installing the Server for LaTeX Since we&amp;rsquo;re using NeoVim to take notes using LaTeX, then let&amp;rsquo;s install the LaTeX language server, which is texlab. You can view the source code here. To install it, run the following command:
cargo install --git https://github.com/latex-lsp/texlab.git --locked Now, add this line to your init.lua:
require(&amp;#39;lspconfig&amp;#39;).texlab.setup{} Now, when you type \, you will be able to see autocompletion.
Demo of LSP Your browser doesn't support embedded videos, but don't worry, you can download it and watch it with your favorite video player! Credit I would like to give a thanks 👏 to Gilles Castel for teaching me all of this stuff. I would recommend to go and checkout his website!
Conclusion So, I have just proven to you that you can write LaTeX
fast easily efficiently Stay tuned to learn about how I:
draw figures manage my notes take notes</content></entry></search>